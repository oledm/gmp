!function(){"use strict";angular.module("app.engine.service",[])}(),function(){"use strict";angular.module("app.authentication",[])}(),function(){"use strict";angular.module("app.cookies",["ngCookies"])}(),function(){"use strict";angular.module("app.department",["ngResource"])}(),function(){"use strict";angular.module("app.login",["ngMessages","ui.router"])}(),function(){"use strict";angular.module("app.main",["ui.router"])}(),function(){"use strict";angular.module("app",["app.config","app.authentication","app.department","app.serverdata","app.engine.service","app.main","app.datepicker","app.login","app.register","app.cookies","app.userdata.service","app.userdata.controller","app.toolbar","app.upload","app.upload.service","app.passport","app.passport.service","app.report"])}(),function(){"use strict";angular.module("app.register",[])}(),function(){"use strict";angular.module("app.config",["ui.router","ngResource"])}(),function(){"use strict";angular.module("app.toolbar",[])}(),function(){"use strict";angular.module("app.upload",["ngFileUpload"])}(),function(){"use strict";angular.module("app.upload.service",[])}(),function(){"use strict";angular.module("app.passport",["ngMessages","ngAnimate"])}(),function(){"use strict";angular.module("app.passport.service",[])}(),function(){"use strict";angular.module("app.serverdata",["ngResource"])}(),function(){"use strict";angular.module("app.datepicker",["ui.bootstrap"])}(),function(){"use strict";angular.module("app.userdata.controller",[])}(),function(){"use strict";angular.module("app.userdata.service",[])}(),function(){"use strict";angular.module("app.report",["ngMessages","ngAnimate"])}(),function(){"use strict";function e(e){function t(){return e.get("/api/engine/").then(function(e){return e.data})}var n={getAllEngines:t};return n}angular.module("app.engine.service").factory("Engine",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,t,n,r){function o(){return t.isSet()}function a(t,n){return e.post("/api/login/",{email:t,password:n}).then(s,c)}function i(){return e.post("/api/logout/",{}).then(u)}function l(t,n,r){return e.post("/api/department/"+r+"/user/",{email:t,password:n})}function s(e){t.set(e.data),n.$emit("cokkiesSet",""),r.go("home")}function u(){t.remove(),n.$emit("cokkiesSet",void 0),r.go("login")}function c(){}var p={isAuthenticated:o,login:a,logout:i,register:l};return p}angular.module("app.authentication").factory("Authentication",e),e.$inject=["$http","Cookies","$rootScope","$state"]}(),function(){"use strict";function e(e){"ngInject";function t(){try{return JSON.parse(e.get(a))}catch(t){return}}function n(){return!!e.get(a)}function r(t){e.put(a,JSON.stringify(t))}function o(){e.remove(a)}var a="authentcatedAccount",i={get:t,isSet:n,set:r,remove:o};return i}e.$inject=["$cookies"],angular.module("app.cookies").factory("Cookies",e)}(),function(){"use strict";function e(e){return e("/api/department/:depId/",{},{measurers:{method:"get",isArray:!0,params:{depId:1},url:"/api/department/:depId/measurer/"}})}angular.module("app.department").factory("Department",e),e.$inject=["$resource"]}(),function(){"use strict";angular.module("app").run(["$http",function(e){e.defaults.xsrfHeaderName="X-CSRFToken",e.defaults.xsrfCookieName="csrftoken"}])}(),function(){"use strict";function e(e){"ngInject";function t(){e.login(r.email,r.password)}function n(){e.isAuthenticated()&&$state.go("home")}var r=this;r.login=t,n()}e.$inject=["Authentication"],angular.module("app.login").controller("LoginController",e)}(),function(){"use strict";function e(e,t,n,r){function o(){e.isAuthenticated()||t.path("/login"),r.$on("cokkiesSet",function(e,t){void 0===t?i.menu=[]:a()}),a()}function a(){i.menu=[{name:"Профиль",link:"Профиль",ref:"profile"}];var e=n.get();if(void 0!==e){var t=e.department.report_types;angular.forEach(t,function(e){i.menu.push({name:e.name,link:e.name,ref:e.url})})}}var i=this;i.menu=[],o(),i.isAuthenticated=function(){return e.isAuthenticated()}}angular.module("app.main").controller("MainController",e),e.$inject=["Authentication","$location","Cookies","$rootScope"]}(),function(){"use strict";function e(e,t){function n(){a.loadDepartments()}function r(){e.login(a.email,a.password)}function o(){console.log("Registration failed")}var a=this;a.loadDepartments=function(){t.query(function(e){a.allDeps=e})},a.register=function(){e.register(a.email,a.password,a.department.id).then(r,o)},n()}angular.module("app.register").controller("RegisterController",e),e.$inject=["Authentication","Department"]}(),function(){"use strict";function e(e,t,n,r){e.state("home",{url:"/"}).state("login",{url:"/login",controller:"LoginController",controllerAs:"vm",templateUrl:"/static/src/app/user/login.tpl.html"}).state("register",{url:"/register",controller:"RegisterController",controllerAs:"vm",templateUrl:"/static/src/app/user/register.tpl.html"}).state("profile",{url:"/profile",controller:"UserDataController",controllerAs:"vm",templateUrl:"/static/src/app/user/profile.tpl.html"}).state("upload",{url:"/upload",controller:"UploadController",controllerAs:"vm",templateUrl:"/static/src/app/filestorage/upload.tpl.html"}).state("passport",{url:"/passport",controller:"PassportController",controllerAs:"vm",templateUrl:"/static/src/app/report/passport.tpl.html"}).state("report",{url:"/report",controller:"ReportController",controllerAs:"vm",templateUrl:"/static/src/app/report/report/report.tpl.html"}).state("report-container",{url:"/report-container",controller:"ReportContainerController",controllerAs:"vm",templateUrl:"/static/src/app/report/report_container/report.tpl.html"}),t.otherwise("/login"),n.defaults.stripTrailingSlashes=!1,r.html5Mode(!0),r.hashPrefix("!")}function t(){var e=angular.element(document);e.on("click",function(){var t=e.find(".navbar-collapse"),n=t.hasClass("in");n&&t.collapse("hide")})}angular.module("app.config").config(e).run(t),e.$inject=["$stateProvider","$urlRouterProvider","$resourceProvider","$locationProvider"]}(),function(){"use strict";function e(e){var t=this;t.logout=function(){e.logout()}}angular.module("app.toolbar").controller("ToolbarController",e),e.$inject=["Authentication"]}(),function(){"use strict";function e(e,t,n){function r(){i()}function o(e){a(e.files),i()}function a(e){angular.forEach(e,function(e){t.upload({url:"/api/upload/",data:{fileupload:e}}).then(function(){i()},function(e){console.log("Error status: "+e.status)})})}function i(){n.query().then(function(e){u.uploadedFiles=e})}function l(){angular.forEach(u.selected,function(e){n.remove(e.id),s(e.id)}),u.selected=[]}function s(e){angular.forEach(u.uploadedFiles,function(t,n){u.uploadedFiles[n].id===e&&u.uploadedFiles.splice(n,1)})}var u=this;e.fileSelected=o,u.files=[],u.upload=a,u.uploadedFiles=[],u.remove=l,u.selected=[],u.sortOrder="-uploaded_at",r()}angular.module("app.upload").controller("UploadController",e),e.$inject=["$scope","Upload","UploadService"]}(),function(){"use strict";function e(e){function t(){return e.get("/api/file/").then(function(e){return e.data})}function n(t){return e["delete"]("/api/file/"+t+"/").then(function(e){return e.data})}var r={query:t,remove:n};return r}angular.module("app.upload.service").factory("UploadService",e),e.$inject=["$http"]}(),function(){"use strict";function e(e){return{restrict:"A",link:function(t,n){e(function(){n.focus()})}}}angular.module("app.passport").directive("autofocus",e),e.$inject=["$timeout"]}(),function(){"use strict";function e(){return{require:"^form",restrict:"A",link:function(e,t,n,r){return"vm.docsForm"===r.$name?void(e.showCheckmark=!0):void e.$watch(r.$name+".$valid",function(t){t?e.showCheckmark=!0:e.showCheckmark=!1})},scope:!0,transclude:!0,template:'<span ng-if="showCheckmark"><i class="icon ion-checkmark" style="color: #00e676"></i>&nbsp;</span><span ng-transclude></span>'}}angular.module("app.passport").directive("checkmark",e)}(),function(){"use strict";function e(e,t,n,r,o,a,i){function l(e){var t=e.name;angular.forEach(e.files,function(e){i.upload({url:"/api/upload/",data:{fileupload:e}}).then(function(e){v.report.files[t]=e.data.id},function(e){console.log("Error status: "+e.status)})})}function s(){v.report.team=[{name:"",required:!0}],v.report.docs=$,p(),f(),d(),g()}function u(){v.report.team.push({name:"",required:!1})}function c(){v.report.type="passport",console.log("team:",JSON.stringify(v.report)),delete v.report.team[0].required,v.report.therm.tclass=v.tclasses.all.filter(function(e){return e.name===v.tclasses.selected})[0].id,a.createPassport(v.report)}function p(){n.getAllUsers().then(function(e){v.allEmployees=e})}function f(){o.getAllEngines().then(function(e){v.engine.all=e})}function d(){a.getOrgs().then(function(e){v.orgs=e})}function m(e){var t=v.orgs.filter(function(t){return t.name===e});a.getLPUs(t[0].id).then(function(e){v.lpus=e})}function g(){a.getTClasses().then(function(e){v.tclasses.all=e})}function h(e,t){var n=t.id,r=e.indexOf(n);-1!==r?(e.splice(r,1),t.selected=!1):(t.selected=!0,e.push(n))}e.upload=l;var v=this,$=[{name:"Журнал ремонта электродвигателя",value:!0},{name:"Журнал эксплуатации электродвигателя",value:!0},{name:"Инструкция по эксплуатации завода-изготовителя",value:!0},{name:"Протоколы штатных измерений и испытаний",value:!0},{name:"Паспорт завода-изготовителя на взрывозащищенный электродвигатель",value:!0},{name:"Схема электроснабжения электродвигателя",value:!0}],y=["team.tpl.html","measurers.tpl.html","lpu.tpl.html","dates.tpl.html","engines.tpl.html","values.tpl.html","docs.tpl.html","photos.tpl.html","therm.tpl.html","vibro.tpl.html","resistance.tpl.html","signers.tpl.html"],k=["руководитель бригады","зам. руководителя бригады","член бригады"],_={all:r.measurers(),selected:[],sortOrder:"name"},U={all:[],selected:{type:"",serial_number:0},sortOrder:"name"};v.addEmployee=u,v.allEmployees=[],v.createPassport=c,v.engine=U,v.workBegin=void 0,v.workEnd=void 0,v.investigationDate=void 0,v.lpus={},v.orgs={},v.pages=y,v.tclasses={all:[],selected:""},v.getLPUs=m,v.measurers=_,v.ranks=k,v.report={team:void 0,measurers:_.selected,files:{},therm:{},vibro:{},order:{},resistance:{}},v.setSelected=h,s()}angular.module("app.passport").controller("PassportController",e),e.$inject=["$scope","$state","UserData","Department","Engine","Passport","Upload"]}(),function(){"use strict";function e(e){function t(t){e.post("/report/",{report_data:t},{responseType:"arraybuffer",headers:{"Content-Type":"application/json"}}).success(function(e,t,n){var r=new Blob([e],{type:"application/pdf"});return saveAs(r,"report.pdf"),n})}function n(t){return e.get("/api/organization/"+t+"/lpu/").then(function(e){return e.data})}function r(){return e.get("/api/organization/").then(function(e){return e.data})}function o(){return e.get("/api/tclass/").then(function(e){return e.data})}var a={createPassport:t,getLPUs:n,getOrgs:r,getTClasses:o};return a}angular.module("app.passport.service").factory("Passport",e),e.$inject=["$http"]}(),function(){"use strict";function e(){return{require:"ngModel",scope:!0,link:function(e,t,n,r){t.bind("change",function(){e.$apply(function(){r.$setViewValue(t.val()),r.$render()})})}}}angular.module("app.passport").directive("validFile",e)}(),function(){"use strict";function e(e){return e("/api/:category/")}angular.module("app.serverdata").factory("ServerData",e),e.$inject=["$resource"]}(),function(){"use strict";function e(e){var t=this;e.closeText="Закрыть",e.currentText="Сегодня",e.clearText="Очистить",t.dateOptions={startingDay:1},t.yearOptions={datepickerMode:"year",maxMode:"year",minMode:"year",formatYear:"yyyy"},t.open=function(){t.popup.opened=!0},t.popup={opened:!1}}angular.module("app.datepicker").controller("DatepickerController",e),e.$inject=["uibDatepickerPopupConfig"]}(),function(){"use strict";function e(e){function t(){e.get()}function n(){e.update()}var r=this;r.updateProfile=n,r.userdata=e,t()}angular.module("app.userdata.controller").controller("UserDataController",e),e.$inject=["UserData"]}(),function(){"use strict";function e(e,t,n,r){function o(){angular.forEach(d.data,function(e,t){f[t]=""})}function a(){var t=e.get();angular.forEach(t,function(e,n){n in f&&(f[n]=t[n])})}function i(){var n=e.get();return t.get("/api/department/"+n.department.id+"/user/").then(l)}function l(e){return e.data}function s(){var t=e.get();return d.isLoading=!0,d.updateSuccessfull=!1,angular.forEach(f,function(e,n){t[n]=f[n]}),e.set(t),u(t)}function u(e){return t.put("/api/department/"+e.department.id+"/user/"+e.username+"/",{first_name:f.first_name,last_name:f.last_name,middle_name:f.middle_name,email:f.email}).then(c)["catch"](p)}function c(e){return d.isLoading=!1,d.updateSuccessfull=!0,r(function(){d.updateSuccessfull=!1},3e3),e.data}function p(e){return n.reject(e)}var f={email:"",first_name:"",last_name:"",middle_name:"",department:""},d={clean:o,data:f,get:a,getAllUsers:i,isLoading:!1,update:s,updateSuccessfull:!1};return d}angular.module("app.userdata.service").factory("UserData",e),e.$inject=["Cookies","$http","$q","$timeout"]}(),function(){"use strict";function e(){return{restrict:"E",link:function(e){e.isValid=e.userForm.email.$touched},templateUrl:"/static/src/app/user/gmp-input.directive.tpl.html"}}angular.module("app.login").directive("gmpInput",e)}(),function(){"use strict";function e(e,t,n,r,o,a,i){function l(){$.report.info={license:"Договор №          от          на выполнение работ по экспертизе промышленной безопасности."},$.report.team={},$.report.docs=[],$.report.obj_data={detail_info:[]},c(),p(),f(),m()}function s(e,t){var t=t.trim();""!==t&&-1===e.indexOf(t)&&e.push(t)}function u(){$.report.type="report",console.log("team:",JSON.stringify($.report)),$.report.therm.tclass=$.tclasses.all.filter(function(e){return e.name===$.tclasses.selected})[0].id,a.createPassport($.report)}function c(){n.getAllUsers().then(function(e){$.allEmployees=e})}function p(){o.getAllEngines().then(function(e){$.engine.all=e})}function f(){a.getOrgs().then(function(e){$.orgs=e})}function d(e){var t=$.orgs.filter(function(t){return t.name===e});a.getLPUs(t[0].id).then(function(e){$.lpus=e})}function m(){a.getTClasses().then(function(e){$.tclasses.all=e})}function g(e,t){13===e.which&&(e.preventDefault(),s(t,e.target.value),e.target.value="")}function h(e,t){var n=t.id,r=e.indexOf(n);-1!==r?(e.splice(r,1),t.selected=!1):(t.selected=!0,e.push(n))}function v(e){var t=e.name;angular.forEach(e.files,function(e){i.upload({url:"/api/upload/",data:{fileupload:e}}).then(function(e){$.report.files[t].push(e.data.id),console.log($.report.files)},function(e){console.log("Error status: "+e.status)})})}e.upload=v;var $=this,y=["report/team.tpl.html","report/report_info.tpl.html","measurers.tpl.html","lpu.tpl.html","report/dates.tpl.html","engines.tpl.html","order.tpl.html","report/photos.tpl.html","therm.tpl.html","vibro.tpl.html","resistance.tpl.html"],k=[{name:"ВИК",full_name:"Визуальный и измерительный контроль"},{name:"УК",full_name:"Ультразвуковой контроль"},{name:"ТК",full_name:"Тепловой контроль"},{name:"ВД",full_name:"Вибродиагностический контроль"},{name:"ЭЛ",full_name:"Электрический контроль"}],_={all:r.measurers(),selected:[],sortOrder:"name"},U={all:[],selected:{type:"",serial_number:0},sortOrder:"name"};$.addToCollection=s,$.allEmployees=[],$.control_types=k,$.createPassport=u,$.engine=U,$.workBegin=void 0,$.workEnd=void 0,$.lpus={},$.orgs={},$.pages=y,$.procKeyPress=g,$.tclasses={all:[],selected:""},$.getLPUs=d,$.measurers=_,$.report={team:void 0,measurers:_.selected,files:{main:[],therm1:[],therm2:[],licenses:[]},therm:{},vibro:{},order:{},resistance:{}},$.setSelected=h,l()}angular.module("app.report").controller("ReportController",e),e.$inject=["$scope","$state","UserData","Department","Engine","Passport","Upload"]}(),function(){"use strict";function e(e,t,n,r,o,a){"ngInject";function i(){u(),c(),s()}function l(){m.report.type="report-container",console.log("report:",JSON.stringify(m.report))}function s(){t.getAllUsers().then(function(e){m.allEmployees=e})}function u(){a.query({category:"container"},function(e){m.devices.all=e})}function c(){r.getOrgs().then(function(e){m.orgs=e})}function p(e){var t=m.orgs.filter(function(t){return t.name===e});r.getLPUs(t[0].id).then(function(e){m.lpus=e})}function f(e,t){var n=t.id,r=e.indexOf(n);-1!==r?(e.splice(r,1),t.selected=!1):(t.selected=!0,e.push(n))}function d(e){var t=e.name;angular.forEach(e.files,function(e){o.upload({url:"/api/upload/",data:{fileupload:e}}).then(function(e){m.report.files[t].push(e.data.id),console.log(m.report.files)},function(e){console.log("Error status: "+e.status)})})}e.upload=d;var m=this,g=["report_container/devices.tpl.html","report_container/report_info.tpl.html","report_container/order.tpl.html","report_container/team.tpl.html","report_container/signers.tpl.html","report_container/schemes.tpl.html"],h=({all:n.measurers(),selected:[],sortOrder:"name"},{all:[]}),v=["работоспособное","неработоспособное","предельное"];m.allEmployees=[],m.device_conditions=v,m.createPassport=l,m.devices=h,m.lpus={},m.orgs={},m.pages=g,m.getLPUs=p,m.report={team:[],files:{legend:[],conrtol_VIK:[],conrtol_UK_container:[],conrtol_UK_connections:[],conrtol_magnit:[]},info:{info_investigation:"Экспертиза промышленной безопасности проводится впервые. \nНО, ВО – 1 раз в 2 года (ответственный за осуществление производственного контроля за эксплуатацией сосуда). \nНО, ВО – 1 раз в 4 года (уполномоченная специализированная организация, ответственный за осуществление производственного контроля за эксплуатацией сосуда). \nГИ – 1 раз в 8 лет (уполномоченная специализированная организация, ответственный за осуществление производственного контроля за эксплуатацией сосуда)",info_repair:"В представленной технической документации не отмечено",danger_places:"Места концентраций напряжений – продольные и кольцевые сварные швы, места вварки штуцеров; места наиболее вероятного коррозионного износа – внутренняя поверхность нижнего днища"},schemes:{VIK:"Схема проведения визуально-измерительного контроля сосуда",UK_container:"Схема проведения ультразвуковой толщинометрии и твердометрии сосуда",UK_connections:"Схема проведения ультразвукового контроля сварных соединений сосуда",magnit:"Схема проведения магнитопорошкового контроля сосуда"}},m.setSelected=f,i()}e.$inject=["$scope","UserData","Department","Passport","Upload","ServerData"],angular.module("app.report").controller("ReportContainerController",e)}();
//# sourceMappingURL=data:application/json;base64,
